import React, {useEffect} from "react";
import h337 from "heatmap.js";
import {sampleData} from './sampleData.js'

function HeatMap(props) {
        console.log(props.data)
        useEffect(() => {

        var heatmapInstance = h337.create({
            // only container is required, the rest will be defaults
            container: document.querySelector('.App'),
            gradient: {
                // enter n keys between 0 and 1 here
                // for gradient color customization
                // '.5': 'blue',
                // '.8': 'red',
                // '.95': 'white'
                '0.11':'#2c7bb6',
                '0.22':'#00a6ca',
                '0.33':'#00ccbc',
                '0.44':'#90eb9d',
                '0.55':'#ffff8c',
                '0.66':'#f9d057',
                '0.77':'#f29e2e',
                '0.88':'#e76818',
                '0.99':'#d7191c'
              },
        });
    // now generate some random data
    var points = [];
    var max = 0;
    var width = 840;
    var height = 400;
    var len = 200;

    while (len--) {
     var val = Math.floor(Math.random()*100);
     max = Math.max(max, val);
     var point = {
      x: Math.floor(Math.random()*width),
      y: Math.floor(Math.random()*height),
      value: val
     };
     points.push(point);
   }

   console.log(max)
   // heatmap data format
   let processData = props.data.map((d,i) => {
       return {
           x: parseInt(d.x),
           y: parseInt(d.y),
           value: 1
       }
   })
   let lineStr =
   "M 627.0851667556744 120.80501540679143 L 767.583722012645 157.56124482518769 C 783.0042951506052 161.5954651272068 798.615209427866 168.93528571614132 798.8055505671666 172.24088600305674 L 800.1590875577483 195.74737693223312 C 800.3494286970489 199.05297721914854 792.8665088982202 212.30764567910205 785.1932479600908 222.2567138521401 L 730.6278368445047 293.00564308263307 C 722.9545759063753 302.9547112556711 707.6470846562904 312.3671834861851 700.0128543443346 311.830587543661 L 645.7249943482053 308.0147941746009 C 638.0907640362495 307.4781982320768 629.2027416533067 310.98387553360374 627.9489495823196 315.0261487776548 L 619.0330948553004 343.77120295757317 C 617.7793027843134 347.8134762016242 622.0483444820245 357.1631121442408 627.5711782507229 362.47047484280637 L 666.8446628281339 400.2117206992728 C 672.3674965968323 405.51908339783836 674.10382484467 412.1943088478298 670.3173193238093 413.56217159925563 L 643.3910578421334 423.28919560939494 C 639.6045523212726 424.65705836082077 639.4128745153214 428.98665156136946 643.0077022302308 431.9483820104923 L 668.5709215362534 453.00957631536596 C 672.1657492511629 455.9713067644888 666.755997370339 458.8692462610345 657.7514177746057 458.80545530845734 L 593.7188517605023 458.3518307567974 C 584.714272164769 458.28803980422026 571.8106398260297 453.39488718635005 567.9115870830238 448.56552552105705 L 540.184989799426 414.2233981234178 C 536.2859370564202 409.3940364581248 527.4123506574806 412.62919996329276 522.437817001547 420.6937251337538 L 487.0633554482419 478.04145967925433 C 482.0888217923084 486.10598484971536 477.70295553731034 499.3374797450408 478.29162293824584 504.5044494699053 L 482.4777022337871 541.2473452911636 C 483.0663696347226 546.414315016028 477.68655904871184 553.6889691142121 471.7180810617656 555.7966534875318 L 429.2755709323701 570.7846312533607 C 423.30709294542385 572.8923156266803 406.31620538729607 558.6331826409554 395.29379581611454 542.2663652819108 L 316.91221664326815 425.88010850648226 C 305.8898070720866 409.5132911474376 291.9895570690344 395.5284702394308 289.1117166371636 397.9104666904686 L 268.64707356608284 414.84910812007075 C 265.7692331342121 417.2311045711085 261.45527947799735 402.20989017995026 260.01916625365334 384.8066793377542 L 249.80680554720698 261.0505133488042 C 248.37069232286296 243.64730250660813 239.4112920115191 218.02901421687582 231.88800492451924 209.8139367693396 L 178.38907452807575 151.3956082535264 C 170.8657874410759 143.18053080599017 163.09869259994602 127.72760810516849 162.854884845816 120.48976285188303 L 161.12114081644705 69.02064105074203 C 160.87733306231704 61.78279579745657 166.19164703829935 54.73037268065747 171.74976876841168 54.915794817143826 L 211.27418996032162 56.234352232157896 C 216.83231169043395 56.419774368644255 233.11583595795963 65.48000693074664 243.84123849537295 74.35481735636267 L 320.1107676503122 137.46458038296555 C 330.83617018772554 146.33939080858158 353.9741142307024 143.49492312311983 366.386655736266 131.77564501204205 L 454.65361755360686 48.43855622215557 C 467.06615905917045 36.719278111077784 487.89969208628895 34.97058842014334 496.3206836078438 44.94117684028668 L 556.2032899833453 115.84313893908376 C 564.6242815049002 125.8137273592271 577.9088634620848 134.43617874583833 582.7724538977146 133.08804171230622 L 627.0851667556744 120.80501540679143 "
  var data = {
    max: 30,
    data:
    processData
    // processData

  };
  console.log(data)
  // if you have a set of datapoints always use setData instead of addData
  // for data initialization
  heatmapInstance.setData(data);
  let canvas = document.querySelector('.heatmap-canvas')
  console.log(canvas)

  let ctx = canvas.getContext('2d')
  ctx.fillStyle = 'purple';
  data.data.forEach((d,i) => {
    ctx.beginPath();
    ctx.arc(d.x, d.y, 0.5, 0, 2 * Math.PI);
    ctx.fill();
  })

//   let splitStr = lineStr.match(/<path\b([\s\S]*?)\/>/g)
//   console.log( splitStr )

  var p = new Path2D(lineStr)
  ctx.strokeStyle = "#000";
  ctx.lineWidth = 0.3;
  ctx.stroke(p);
//   ctx.fill(p);


 })



  return (
    <div className="myCanvas">
    </div>
  );
}

export default HeatMap;
