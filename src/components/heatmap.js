import React, {useEffect} from "react";
import h337 from "heatmap.js";
import {sampleData} from './sampleData.js'

function HeatMap(props) {
        console.log(props.data)
        useEffect(() => {

        var heatmapInstance = h337.create({
            // only container is required, the rest will be defaults
            container: document.querySelector('.App'),
            gradient: {
                // enter n keys between 0 and 1 here
                // for gradient color customization
                // '.5': 'blue',
                // '.8': 'red',
                // '.95': 'white'
                '0.11':'#2c7bb6', 
                '0.22':'#00a6ca', 
                '0.33':'#00ccbc', 
                '0.44':'#90eb9d',
                '0.55':'#ffff8c',
                '0.66':'#f9d057',
                '0.77':'#f29e2e',
                '0.88':'#e76818', 
                '0.99':'#d7191c' 
              },
        });
    // now generate some random data
    var points = [];
    var max = 0;
    var width = 840;
    var height = 400;
    var len = 200;

    while (len--) {
     var val = Math.floor(Math.random()*100);
     max = Math.max(max, val);
     var point = {
      x: Math.floor(Math.random()*width),
      y: Math.floor(Math.random()*height),
      value: val
     };
     points.push(point);
   }

   console.log(max)
   // heatmap data format
   let processData = props.data.map((d,i) => {
       return {
           x: parseInt(d.x),
           y: parseInt(d.y),
           value: 1
       }
   })
   let lineStr = 
   'M -76.0541732921829 267.8202355866715 L -200.87050803046418 321.20023888880223 C -214.56986184320237 327.0590197390361 -219.5763476718938 339.20284112154775 -210.88347968784703 345.4878816538255 L -149.06752957907 390.18150321668986 C -140.3746615950232 396.46654374896764 -132.29667632283827 420.3803177139166 -132.9115590347001 438.00905114658786 L -137.2840583190509 563.3689333344722 C -137.89894103091274 580.9976667671435 -127.05877103029718 601.2031005082812 -115.60371831781981 603.7798008167476 L -34.145565695758485 622.1030030102868 C -22.690512983281113 624.6797033187532 -10.373292291440777 632.2783365972113 -9.51112431207781 637.3002695672028 L -3.380152014385603 673.0117929093647 C -2.5179840350226366 678.0337258793562 -19.12606849813252 692.1027947513887 -36.596320940605366 701.1499306534297 L -160.82922719819004 765.4851192901651 C -178.2994796406629 774.5322551922061 -213.8665172823801 783.715022674447 -231.96330248162445 783.8506542546469 L -360.65155278736205 784.8151454916243 C -378.74833798660643 784.9507770718242 -396.80682310951374 796.8624855980393 -396.7685230331767 808.6385625440543 L -396.49616693478 892.3795541601613 C -396.4578668584429 904.1556311061763 -417.1511473153879 907.0992847476755 -437.8827278486699 898.2668614431595 L -585.3073005297863 835.4585179443798 C -606.0388810630683 826.6260946398638 -623.5998815194357 811.0521718971105 -620.4293014425213 804.3106724588731 L -597.8829542289067 756.3711208980737 C -594.7123741519922 749.6296214598364 -597.0120438422473 740.6734504178614 -602.482293609417 738.458778814124 L -641.3818475092903 722.7100029653242 C -646.85209727646 720.4953313615868 -652.2682273747483 709.7814748065456 -652.214107705867 701.282289855242 L -651.8292567271553 640.8436413126385 C -651.775137058274 632.3444563613349 -662.5907450508987 625.634749735535 -673.4604727124046 627.4242280610387 L -750.7563138608908 640.1494072646202 C -761.6260415223967 641.9388855901238 -770.9879119014699 633.7137574971749 -769.4800546190373 623.6991510787223 L -758.7575139439604 552.4841721030591 C -757.2496566615278 542.4695656846064 -747.7762164990668 525.2706794199587 -739.8106336190386 518.0863995737636 L -683.1664886943935 466.9981873341544 C -675.2009058143653 459.81390748795934 -667.341064445939 437.3101208441595 -667.4468059575408 421.9906140465547 L -668.1987455955989 313.0518990413651 C -668.3044871072008 297.73239224376033 -672.9560367467243 277.2503019659945 -677.5018448746458 272.0877184858334 L -709.8275915620881 235.37601373802156 C -714.3733996900096 230.21343025786052 -711.8689013517617 215.33518229897174 -704.8185948855921 205.61951782024406 L -654.6830822372754 136.530348193736 C -647.6327757711058 126.81468371500829 -638.2898768061955 125.59487955671891 -635.9972843074546 134.09073987715723 L -619.6944043164086 194.5057466002742 C -617.4018118176677 203.0016069207125 -611.531492797471 206.31565149276963 -607.9537662760148 201.1338357443884 L -582.5121554567714 164.28536820034415 C -578.9344289353153 159.1035524519629 -558.1920244608102 179.40900854465684 -541.0273465077613 204.89628038573198 L -418.96741439719096 386.13910236671074 C -401.802736444142 411.6263742077859 -375.34362955028826 433.8314486979937 -366.0492006094835 430.5492513471264 L -299.955483697094 407.20918129651443 C -290.6610547562892 403.9269839456471 -282.2833297624086 392.5985086237331 -283.2000337093327 384.55223065268643 L -289.7188173319042 327.3342539696877 C -290.63552127882826 319.28797599864106 -283.8056188581258 298.6831937821037 -276.0590124904992 286.124689536613 L -220.97203387626553 196.8197704575682 C -213.22542750863892 184.26126621207754 -193.83060283461765 180.3533345923945 -182.182384528223 189.0039072182021 L -76.0541732921829 267.8202355866715 '
  var data = {
    max: 15,
    data: 
    processData
    // processData

  };
  // if you have a set of datapoints always use setData instead of addData
  // for data initialization
  heatmapInstance.setData(data);
  let canvas = document.querySelector('.heatmap-canvas')
  console.log(canvas)

  let ctx = canvas.getContext('2d')
  ctx.fillStyle = 'purple';
  data.data.forEach((d,i) => {
    ctx.beginPath();
    ctx.arc(d.x, d.y, 0.5, 0, 2 * Math.PI);
    ctx.fill();
  })

//   let splitStr = lineStr.match(/<path\b([\s\S]*?)\/>/g)
//   console.log( splitStr )

  var p = new Path2D(lineStr)
  ctx.strokeStyle = "#000";
  ctx.lineWidth = 0.3;
  ctx.stroke(p);
//   ctx.fill(p);


 })



  return (
    <div className="myCanvas">
    </div>
  );
}

export default HeatMap;